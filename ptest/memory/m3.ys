# Execution begins at address 0 
	.pos 0 
	irmovq stack, %rsp  	# Set up stack pointer  
	call main		# Execute main program
	halt			# Terminate program 

# Array of 32 elements
	.align 8
array:	.quad 0x0000000000000001
	.quad 0x0000000000000002
    .quad 0x0000000000000010
    .quad 0x0000000000000004
    .quad 0x0000000000000100
    .quad 0x0000000000000006
    .quad 0x0000000000001000
    .quad 0x0000000000000008
    .quad 0x0000000000010000
    .quad 0x000000000000000a
    .quad 0x0000000000100000
    .quad 0x000000000000000c
    .quad 0x0000000001000000
    .quad 0x000000000000000e
    .quad 0x0000000010000000
    .quad 0x0000000000000011
	.quad 0x0000000100000000
    .quad 0x0000000000000033
    .quad 0x0000001000000000
    .quad 0x0000000000000055
    .quad 0x0000010000000000
    .quad 0x0000000000000077
    .quad 0x0000100000000000
    .quad 0x0000000000000099
    .quad 0x0001000000000000
    .quad 0x00000000000000bb
    .quad 0x0010000000000000
    .quad 0x00000000000000dd
    .quad 0x0100000000000000
    .quad 0x00000000000000ff
    .quad 0x1000000000000000
    .quad 0x00000000000000b0
    


main:
    irmovq array,%rdi
    irmovq $32, %rsi
    call skip_sum
    ret




# long skip_sum(long *arr, int length)
# Sum every other element in the array
skip_sum:	irmovq $16,%r8        # Constant 16; go forward 2 quads each iteration
	irmovq $2,%r9	     # Constant 2; decrease remaining length by 2
	xorq %rax,%rax	     # sum = 0
	andq %rsi,%rsi	     # Set CC
	jmp     test         # Goto test
loop:	mrmovq (%rdi),%r10   # Get *start
	addq %r10,%rax       # Add to sum
	addq %r8,%rdi        # start++
	subq %r9,%rsi        # count--.  Set CC
test:	jne    loop          # Stop when 0
	ret                  # Return


# Stack starts here and grows to lower addresses
	.pos 0x300
stack:
